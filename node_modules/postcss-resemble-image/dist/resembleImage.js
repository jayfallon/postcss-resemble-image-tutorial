'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.default = resembleImage;

var _jimp = require('jimp');

var _jimp2 = _interopRequireDefault(_jimp);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function scaleValue(value, min, max) {
    var newMin = 0;
    var newMax = 100;
    var percent = (value - min) / (max - min);
    return percent * (newMax - newMin) + newMin;
}

function colourStopFactory(width) {
    return function colourStop(colour, index) {
        return {
            colour: colour,
            position: scaleValue(index, 0, width)
        };
    };
}

function resolveFidelity(width, pair) {
    if (!pair) {
        throw new Error('Expected a <number> or <percentage> value for fidelity.');
    }
    var number = parseFloat(pair.number);
    if (number === 0) {
        throw new Error('Expected a fidelity greater than 0.');
    }
    if (pair.unit === '%') {
        return width * (number / 100);
    }
    return number;
}

function rgbToHex(_ref) {
    var r = _ref.r;
    var g = _ref.g;
    var b = _ref.b;

    function convert(c) {
        var hex = c.toString(16);
        return hex.length === 1 ? '0' + hex : hex;
    }
    return '#' + convert(r) + convert(g) + convert(b);
}

function resembleImage(path, _ref2) {
    var generator = _ref2.generator;
    var fidelity = _ref2.fidelity;

    return new Promise(function (resolve, reject) {
        _jimp2.default.read(path, function (err, image) {
            if (err) {
                reject(err);
            }
            var width = void 0;
            var height = void 0;
            var chunk = void 0;
            try {
                width = image.bitmap.width;
                height = image.bitmap.height;
                chunk = resolveFidelity(width, fidelity);
            } catch (e) {
                return reject(e);
            }
            var stops = [];
            var colourStop = colourStopFactory(width);
            for (var i = 0; i < width; i += chunk) {
                var color = image.clone().crop(i, 0, chunk, height).resize(1, 1, _jimp2.default.RESIZE_BICUBIC).getPixelColor(0, 0);
                color = rgbToHex(_jimp2.default.intToRGBA(color));
                stops.push(colourStop(color, i));
            }
            return resolve(generator(stops));
        });
    });
}